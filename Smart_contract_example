{-# LANGUAGE NumericUnderscores #-}
{-# LANGUAGE OverloadedStrings  #-}
module DeliveryContractWithOracle where

import Language.Marlowe.Extended.V1

main :: IO ()
main = printJSON deliveryContract

-- Parameters for simplicity
explicitRefunds :: Bool
explicitRefunds = False

seller, buyer, oracle :: Party
seller = Role "Seller"
buyer = Role "Buyer"
oracle = Role "USPS_Oracle" -- Updated to USPS tracking oracle

sellerDeposit, buyerDeposit, totalDeposits :: Value
sellerDeposit = ConstantParam "Seller's deposit"
buyerDeposit = ConstantParam "Buyer's deposit"
totalDeposits = AddValue sellerDeposit buyerDeposit

deliveryConfirmation :: ChoiceId
deliveryConfirmation = ChoiceId "Package Delivered" oracle

initialDeposit :: Party -> Value -> Timeout -> Contract -> Contract -> Contract
initialDeposit by deposit timeout timeoutContinuation continuation =
  -- Existing logic for initial deposit

oracleInput :: ChoiceId -> Timeout -> Contract -> Contract -> Contract
oracleInput choiceId timeout timeoutContinuation continuation =
  -- Adapted for delivery confirmation input

refund :: Party -> Value -> Contract -> Contract
refund who amount
  | explicitRefunds = -- Existing refund logic
  | otherwise = id

-- Logic for releasing funds based on delivery confirmation
releaseFunds :: Contract
releaseFunds =
  When [Case (Choice deliveryConfirmation [Bound 1 1]) -- Assuming 1 for delivery confirmation
        -- Logic to release funds to the seller upon delivery confirmation
        $ Pay buyer (Party seller) ada totalDeposits
        -- Add more logic as needed, e.g., handling non-delivery cases
       ]
       (TimeParam "Delivery Confirmation Deadline")
       -- Logic for refund if no delivery confirmation is received
       (refund seller sellerDeposit $ refund buyer buyerDeposit Close)

deliveryContract :: Contract
deliveryContract = initialDeposit seller sellerDeposit (TimeParam "Seller Deposit Deadline") Close
                    $ initialDeposit buyer buyerDeposit (TimeParam "Buyer Deposit Deadline") (refund seller sellerDeposit Close)
                    $ releaseFunds

-- Other functions like wait, gtLtEq, etc., are omitted as they might not be relevant to the updated scenario
